@page "/beaconstable"
@using IndoorMappingWebsite.Models
@using IndoorMappingWebsite.Services
@attribute [StreamRendering]
@inject IBeaconService BeaconService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager


<PageTitle>beaconstable</PageTitle>

<style>
    body {
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
    }

    /* Navbar Styles */
    .navbarList {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: darkred;
        padding: 0 20px;
        list-style: none;
        margin: 0;
        height: 60px;
    }

    .logo a {
        color: white;
        font-size: 24px;
        font-weight: bold;
        text-decoration: none;
    }

    .navbarItem {
        margin-left: 15px;
    }

        .navbarItem a {
            color: white;
            text-decoration: none;
            padding: 10px 16px;
            border-radius: 6px;
            transition: background-color 0.3s ease;
        }

            .navbarItem a:hover:not(.active) {
                background-color: #540000;
            }

            .navbarItem a.active {
                background-color: gray;
            }

    /* Center container and buttons */
    .center-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: calc(100vh - 60px);
        flex-direction: column;
        text-align: center;
        padding: 20px;
    }

        .center-container h1 {
            margin-bottom: 3rem;
            font-size: 2rem;
            color: #343a40;
        }

    /* Filter input */
    .search-bar {
        margin-bottom: 1.5rem;
        width: 100%;
        max-width: 500px;
    }

        .search-bar input {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #ced4da;
            font-size: 1.1rem;
        }

    /* Table Container */
    .table-container {
        width: 80%;
        height: calc(100vh - 200px);
        overflow-y: auto;
        overflow-x: hidden;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 2rem;
        margin-bottom: 0;
        padding: 0;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
        padding: 0;
    }

    th, td {
        vertical-align: middle;
        text-align: center;
        padding: 12px;
        font-size: 1.1rem;
    }

    th {
        color: white;
        text-transform: uppercase;
        font-weight: bold;
    }

    thead {
        position: sticky;
        top: 0;
        background-color: darkred;
    }

    button {
        width: 80px;
    }

    .addbtn {
        background-color: darkred;
        position: sticky;
        bottom: 0;
    }

    input {
        text-align: center;
    }

    .canto-inferior-direito {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 10px;
        background-color: @messageColor;
        border-radius: 16px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 9999;
    }

    .modal-backdrop-custom {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: black;
        opacity: 0.5;
        z-index: 10; /* um pouco abaixo do modal */
    }

</style>
@if (showModal)
{
    <div class="modal-backdrop-custom"></div>
}
@if (message != "" && message != null)
{
    <div class="canto-inferior-direito">
        @message
    </div>
}
<ul class="navbarList">
    <li class="logo"><a href="home">IndoorMap</a></li>
    <div style="display: flex;">
        <li class="navbarItem"><a href="home">Home</a></li>
        <li class="navbarItem"><a href="map">Map</a></li>
        <li class="navbarItem"><a href="usertable">Users</a></li>
        <li class="navbarItem"><a class="active" href="beaconstable">Beacons</a></li>
        <li class="navbarItem"><a href="pathsmap">Paths</a></li>
        <li class="navbarItem"><a href="logstable">Logs</a></li>
    <li class="navbarItem"><a href="infrastructuretable">Infrastructure</a></li>
    <li class="navbarItem"><a href="feedbacktable">Feedback</a></li>

    </div>
</ul>

<div class="center-container">
    <h1>Beacons Table</h1>

    <!-- Search Input -->
    <div class="search-bar">
        <input type="text" @oninput="OnSearchInput" placeholder="Search by name, longitude, latitude, or localization..." class="form-control" />
    </div>

    <!-- Table with Filtered Data inside a Scrollable Container -->
    <div class="table-container">
        <table class="table table-striped m-0">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Longitude</th>
                    <th>Latitude</th>
                    <th>Localization</th>
                    <th>Floor</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var beacon in FilteredBeacons)
                {
                    <tr>
                        <td>@beacon.nome</td>
                        <td>@(beacon.longitude)º</td>
                        <td>@(beacon.latitude)º</td>
                        <td>@beacon.localizacao</td>
                        <td>@beacon.piso</td>
                        <td><button type="button" class="btn btn-primary" @onclick="() => ShowEditModal(beacon)">Edit</button></td>
                        <td><button type="button" class="btn btn-danger" @onclick="() => HandleDeleteSubmit(beacon.id)">Delete</button></td>
                    </tr>
                }
                <tr class="addbtn">
                    <td><InputText class="form-control" placeholder="Insira o nome..." @bind-Value="newBeacon.nome" /></td>
                    <td><InputNumber class="form-control" placeholder="Insira a longitude..." @bind-Value="newBeacon.longitude" /></td>
                    <td><InputNumber class="form-control" placeholder="Insira a latitude..." @bind-Value="newBeacon.latitude" /></td>
                    <td><InputText class="form-control" placeholder="Insira a localização..." @bind-Value="newBeacon.localizacao" /></td>
                    <td><InputNumber class="form-control" placeholder="Insira o piso..." @bind-Value="newBeacon.piso" /></td>
                    <td></td>
                    <td><button type="button" class="btn btn-success" @onclick="HandleValidSubmit">Add</button></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="modal" tabindex="-1" style="display:@(showModal ? "block" : "none")" aria-hidden="@(showModal ? "false" : "true")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Beacon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="beaconToEdit" OnValidSubmit="HandleEditSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="nome" class="form-label">Name</label>
                            <InputText id="nome" class="form-control" @bind-Value="beaconToEdit.nome" />
                        </div>

                        <div class="mb-3">
                            <label for="longitude" class="form-label">Longitude</label>
                            <InputNumber id="longitude" class="form-control" @bind-Value="beaconToEdit.longitude" />
                        </div>

                        <div class="mb-3">
                            <label for="latitude" class="form-label">Latitude</label>
                            <InputNumber id="latitude" class="form-control" @bind-Value="beaconToEdit.latitude" />
                        </div>

                        <div class="mb-3">
                            <label for="localizacao" class="form-label">Location</label>
                            <InputText id="localizacao" class="form-control" @bind-Value="beaconToEdit.localizacao" />
                        </div>

                        <div class="mb-3">
                            <label for="piso" class="form-label">Floor</label>
                            <InputNumber id="piso" class="form-control" @bind-Value="beaconToEdit.piso" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private bool _hasNavigated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasNavigated)
        {
            var token = await localStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                _hasNavigated = true;
                NavigationManager.NavigateTo("/");
            }
        }
    }
    private List<Beacon> beacons = new List<Beacon>();

    protected override async Task OnInitializedAsync()
    {
        beacons = await BeaconService.GetBeaconsAsync();
    }



    // The search query from the input
    private string searchQuery = string.Empty;

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
    }

    // Get the filtered people based on the search query
    private IEnumerable<Beacon> FilteredBeacons =>
        beacons.Where(p => p.nome.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                          p.longitude.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                          p.latitude.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                          p.localizacao.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                          p.piso.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase));


    private Beacon newBeacon = new();
    private string message;

    public async Task HandleValidSubmit()
    {
        var success = await BeaconService.CreateBeaconAsync(newBeacon);
        if (success)
        {
            startTimer("Beacon criado com sucesso!", "green");
            beacons = await BeaconService.GetBeaconsAsync();
            newBeacon = new(); // limpa o form
        }
        else
        {
            startTimer("Erro ao criar beacon.", "red");
        }
    }

    public async Task HandleDeleteSubmit(int id)
    {
        var success = await BeaconService.DeleteBeaconAsync(id);
        if (success)
        {
            startTimer("Beacon eliminado com sucesso!", "green");
            beacons = await BeaconService.GetBeaconsAsync();
        }
        else
        {
            startTimer("Erro ao eliminar beacon.","red");
        }

    }


    /// EDIÇÂO
    private bool showModal = false;  // Controla a visibilidade do modal
    private Beacon beaconToEdit = new Beacon(); // Instância do beacon a ser editado

    private void ShowEditModal(Beacon beacon)
    {
        // Preenche os campos do modal com os dados do beacon selecionado
        beaconToEdit = new Beacon
            {
                id = beacon.id,
                nome = beacon.nome,
                longitude = beacon.longitude,
                latitude = beacon.latitude,
                localizacao = beacon.localizacao,
                piso = beacon.piso
            };
        showModal = true; // Exibe o modal
    }

    private void CloseModal()
    {
        showModal = false; // Fecha o modal
    }

    private async Task HandleEditSubmit()
    {
        // Aqui você pode chamar seu serviço para atualizar o beacon no servidor
        var sucesso = await BeaconService.UpdateBeaconAsync(beaconToEdit);

        if (sucesso)
        {
            /*
            // Atualizar a lista ou fazer outras ações após a edição
            var beacon = FilteredBeacons.FirstOrDefault(b => b.id == beaconToEdit.id);
            if (beacon != null)
            {
                beacon.nome = beaconToEdit.nome;
                beacon.longitude = beaconToEdit.longitude;
                beacon.latitude = beaconToEdit.latitude;
                beacon.localizacao = beaconToEdit.localizacao;
                }*/
                                    beacons = await BeaconService.GetBeaconsAsync();

            CloseModal(); // Fecha o modal após a edição
            startTimer("Beacon editado com sucesso!", "green");
        }
        else
        {
            startTimer("Erro ao editar beacon.", "red");
        }
    }
    private string messageColor = "green";
    private CancellationTokenSource? cts;
    private async Task startTimer(string msg, string Color)
    {
        cts?.Cancel();
        cts = new CancellationTokenSource();
        var token = cts.Token;
        message = msg;
        messageColor = Color;
        StateHasChanged();
        try
        {
            await Task.Delay(5000, token);
            message = "";
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {

        }
    }
}
