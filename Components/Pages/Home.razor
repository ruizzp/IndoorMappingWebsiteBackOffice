@page "/home"
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Home</PageTitle>

<style>
    body {
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
    }

    .navbarList {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: darkred;
        padding: 0 20px;
        list-style: none;
        margin: 0;
        height: 60px;
    }

    .logo a {
        color: white;
        font-size: 24px;
        font-weight: bold;
        text-decoration: none;
    }

    .navbarItem {
        margin-left: 15px;
    }

        .navbarItem a {
            color: white;
            text-decoration: none;
            padding: 10px 16px;
            border-radius: 6px;
            transition: background-color 0.3s ease;
        }

            .navbarItem a:not([href]):not([class]),
            .navbarItem a:not([href]):not([class]):hover {
                color: white;
                text-decoration: none;
            }

            .navbarItem a:hover:not(.active) {
                cursor: pointer;
                background-color: #540000;
            }

            .navbarItem a.active {
                background-color: gray;
            }

    .center-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: calc(100vh - 60px); 
        flex-direction: column;
        text-align: center;
        padding: 20px;
    }

        .center-container h1 {
            margin-bottom: 3rem;
        }
    .vertical-buttons {
        display: flex;
        flex-direction: column;
        width: 80%;
        max-width: 500px;
        gap: clamp(0.5rem, 4vw, 0.5rem);
    }

        .vertical-buttons button {
            font-size: clamp(1.2rem, 3vw, 2rem);
            padding: clamp(0.75rem, 2vw, 1.5rem);
            border-radius: 12px;
            border: none;
            transition: all 0.2s ease;
        }

            .vertical-buttons button:hover {
                background-color: #495057;
                color: white;
            }
</style>

<ul class="navbarList">
    <li class="logo"><a href="">IndoorMap</a></li>
    <div style="display: flex;">
        <li class="navbarItem"><a @onclick="@(() => Logout())">Log Out</a></li>
    </div>
</ul>

<div class="center-container">
    <h1>Data Tables</h1>
    <div class="vertical-buttons">
        <button class="btn btn-secondary" @onclick="@(() => Navigate("map"))">Map</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigate("usertable"))">Users</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigate("beaconstable"))">Beacons</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigate("pathsmap"))">Paths</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigate("logstable"))">Logs</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigate("infrastructuretable"))">Infrastructure</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigate("feedbacktable"))">Feedback</button>
    </div>
</div>

@code {
    private bool _hasNavigated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasNavigated)
        {
            var token = await localStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                _hasNavigated = true;
                NavigationManager.NavigateTo("/");
            }
        }
    }
    private void Navigate(string page)
    {
        NavigationManager.NavigateTo(page);  // A URL para a qual você quer navegar
    }
    private async void Logout()
    {
        await localStorage.ClearAsync(); // Limpa todos os itens do localStorage
        NavigationManager.NavigateTo("/"); // Redireciona para a página de login ou inicial
    }
}
